创建版本库:
初始化一个Git仓库: git init
添加文件到Git仓库:
        1. 添加文件: git add <file>
        2. 提交: git commit -m "注释"

查看工作状态: git status
查看修改内容: git diff <file>

版本回退:
1.HEAD 指向的版本就是当前版本。
   git reset --hard HEAD^  回退一个版本
   git reset --hard HEAD^^ 回退两个版本
   git reset --hard HEAD~n 回退n给版本
   git reset --hard commit_id
2.使用git log查看提交历史，确定要回退到哪个版本
   git log --pretty=oneline 可简化log输出信息
3.重复未来,使用git reflog查看命令历史，以便确定要回到未来的哪个版本
   使用git reset --hard commit_id

工作区和暂存区
查看工作区和版本库里面最新版本的区别
   git diff HEAD -- <file>

撤销修改
撤销(unstage)暂存区的修改
   git reset HEAD file
未添加到暂存区,丢弃工作区的修正:
   git checkout -- file

删除文件
   git rm file
恢复误删的文件
   git checkout -- file

远程仓库:
1.创建SSH文件(生成.SSH/id_rsa .SSH/id_rsa.pub两个文件)
  ssh-keygen -t rsa -b 4096 -C "duoduocy@163.com"
2.Add your key to the ssh-agent
  # start the ssh-agent in the background
  eval "$(ssh-agent -s)"
  Add your SSH key to the ssh-agent
  ssh-add ~/.ssh/id_rsa
4.登录GitHub, 打开"Account settings", "SSH keys"面页
  Add SSH Key,复制id_rsa.pub文件(第一步中创建的文件)的内容
5.Test the connection
  ssh -T git@github.com
6.在GitHub创建新的仓库learngit
  在本地learngit仓库下使用命令
    git remote add origin git@github.com:duoduocy/learngit.git
  或git remote add origin https://github.com/duoduocy/learngit.git
    git push -u origin master
  之后修改做提交
    git push origin master
7.远程仓库克隆
    git clone git@github.com:duoduocy/learngit.git
  或git clone https://github.com/duoduocy/learngit.git

分支:
查看分支: git branch
创建分支: git branch <name>
切换分支: git checkout <name>
创建+切换分支: git checkout -b <name>
合并某分支到当前分支: git merge <name>
删除分支: git branch -d <name>
分支管理策略:
创建分支: git checkout -b dev
修改文件: git add readme.txt
          git commit -m "add merge"
切回分支: git checkout master
合并分支: git merge --no-ff -m "merge with no-ff" dev
查看分支历史: git log --graph --pretty=oneline --abbrev-commit
bug分支: git stash 存储工作现场
         git stash list 查存储的工作现场
         git stash apply 恢复工作现场，但不删除stash内容
         git stash pop 恢复工作现场，删除stash内容
         git stash apply stash@{0} 恢复指定的stash
feature分支:
多人协助:
查看远程库信息: git remote
                git remote -v
推送分支: git push origin master
          git push origin dev
抓取分支: git clone git@github.com:duoduocy/learngit.git (只能抓取master分支)
          git checkout -b dev origin/dev 获取分支dev进行修改

冲突处理: 使用git pull从origin/dev抓取最新的提交
          git pull失败的话(没有指定本地dev分支与远程origin/dev分支的链接)
              git branch --set-upstream dev origin/dev
          在pull，如果仍有冲突,手动解决冲突再提交，push

标签管理:
创建标签: git tag v1.0 <tagname>
          git tag #查看所有标签
          对历史提交的版本进行Tag
              查看commit id: git log --pretty=oneline --abbrev-commit
              对历史commit进行Tag: git tag v0.9 <commit_id>
          查看标签信息: git show <tagname:>
          带说明的标签:
             git tag -a <tagname:v0.1> -m “version 0.1 released" <commit_id>
          通过-s用私钥签名一个标签 
             git tag -s <tagname:v0.1> -m “version 0.1 released" <commit_id>
操作标签:
    删除标签: git tag -d <tagname_v0.1>
    推送标签到远程: git push origin <tagname_v0.1>
    一次性全部推送: git push origin --tags
    删除远程标签: 
        1. 先删除本地标签: git tag -d <tagname_v0.1>
        2. 再从远程删除: git push origin :refs/tags/<tagname_v0.1>

